#!/usr/bin/env perl
use common::sense;
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use File::Find;
use Data::Dumper;
use Readonly;
use File::Spec::Functions qw(catdir splitdir canonpath);
use File::Basename qw(basename);
use IO::File;
use Digest::MD5 qw(md5);
use Perl6::Slurp;



# How does weavel find the duplicated files?
Readonly::Scalar my $ST_PATH => 0;
Readonly::Scalar my $ST_HASH    => 1;



sub usage () {
    print STDERR "\n\n";
    pod2usage(-verbose => 1);
}

sub uneval {
    local $Data::Dumper::Terse = 1;
    local $Data::Dumper::Indent = 1;
    Dumper(@_);
}

{
    my $verbose = 0;

    sub set_verbose {
        $verbose = shift;
    }

    sub verbose {
        $verbose and say STDERR "[verbose] ", @_;
    }
}

sub same_path {
    my ($path1, $path2) = @_;
    return $path1 eq $path2
        && canonpath($path1) eq canonpath($path2);
}

sub same_inode {
    my ($file1, $file2) = @_;
    return (stat $file1)[1] == (stat $file2)[1];
}

sub same_data {
    my ($file1, $file2) = @_;

    my $FH1 = IO::File->new($file1) or die "$file1: $!";
    my $FH2 = IO::File->new($file2) or die "$file2: $!";
    Readonly::Scalar my $LEN => 1024;
    my ($buf1, $buf2);

    while (1) {
        my $c1 = sysread $FH1, $buf1, $LEN;
        my $c2 = sysread $FH2, $buf2, $LEN;
        return 0 if $c1 != $c2;     # different length.
        return 1 if $c1 == 0;       # EOF
        return 0 if $buf1 ne $buf2; # different data.
    }
    die "never reach here.";
}

# why isn't this in List::MoreUtils ?
# (and drop_while(), take(), take_while(), and so on)
sub drop {
    my ($n, @l) = @_;
    # assert $n > 0;
    return @l[$n..$#l];
}

sub weave_link {
    my ($file1, $file2) = @_;

    if (!same_path($file1, $file2)
        && !same_inode($file1, $file2)
        && same_data($file1, $file2))
    {
        verbose "same files and have different inodes: $file1, $file2";
        unlink $file2;
        link $file1 => $file2;
    }
}

sub compare_by_path {
    my ($dir1, $dir2, $follow_symlinks) = @_;
    my $path_num = splitdir $dir1;
    find({
        wanted => sub {
            return unless -f $_;
            verbose "processing $_...";

            my $common = catdir drop $path_num, splitdir $File::Find::dir;
            my $f = basename $_;
            my $file1 = catdir $dir1, $common, $f;
            my $file2 = catdir $dir2, $common, $f;
            verbose "comparing '$file1' and '$file2'...";

            if (-f $file2) {
                weave_link($file1, $file2);
            }

        },
        follow => $follow_symlinks,
        no_chdir => 1,
    }, $dir1);
}

sub compare_by_hash {
    my ($dirs, $follow_symlinks) = @_;
    my %hash;

    find({
        wanted => sub {
            return unless -f $_;
            verbose "processing $_...";

            my $md5 = md5 scalar slurp $_;
            if (exists $hash{$md5}) {
                my $file1 = $hash{$md5};
                my $file2 = $_;
                weave_link($file1, $file2);
            }
            else {
                $hash{$md5} = $_;
            }
        },
        follow => $follow_symlinks,
        no_chdir => 1,
    }, @$dirs);
}


my $verbose = 0;
my $follow_symlinks = 0;
my $stragegy = $ST_PATH;
my $needhelp;
GetOptions(
    'h|help' => \$needhelp,
    'l|follow-symlinks' => \$follow_symlinks,
    'v|verbose' => \$verbose,
    'path' => sub { $stragegy = $ST_PATH },
    'hash' => sub { $stragegy = $ST_HASH },
) or usage;
usage if $needhelp;
set_verbose $verbose;


if ($stragegy == $ST_PATH) {
    unless (@ARGV == 2) {
        say STDERR "error: specify two directories.";
        usage;
    }
    unless (-d $ARGV[0] && -d $ARGV[1]) {
        say STDERR "error: specify two directories.";
        usage;
    }
    compare_by_path(@ARGV, $follow_symlinks);
}
elsif ($stragegy == $ST_HASH) {
    my @dirs = grep {
        -d || do {
            say STDERR "warning: $_ is not a directory.";
            0;
        }
    } @ARGV;
    compare_by_hash(\@dirs, $follow_symlinks);
}
else {
    die "must not reach here!\n";
}


__END__

=head1 NAME

    weavel - unlink and link duplicated files


=head1 SYNOPSIS


=head1 OPTIONS

=over

=item -h, --help

Show this help.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
