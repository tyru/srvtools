#!/usr/bin/env perl
# vim:ai ts=4 sts=4 sw=4 et:

use lib 'extlib/lib/perl5';

use strict;
use warnings;

use DateTime::Event::Cron;
use DateTime::Span;
use DateTime::Format::Duration;

# gnu_compat: --opt="..." is allowed.
# no_bundling: single character option is not bundled.
# no_ignore_case: no ignore case on long option.
use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;


sub usage () {
    pod2usage(-verbose => 1);
}


my $opt_user_mode;
my $opt_sort = 1;
GetOptions(
    'h|help' => \&usage,
    'user!' => \$opt_user_mode,
    'sort!' => \$opt_sort,
) or usage;



my $now = DateTime->now;
my $begin_of_today = DateTime->new(
    year => $now->year,
    month => $now->month,
    day => $now->day,
    #hour => $now->hour,
    #minute => $now->minute,
    #second => $now->second,
    #nanosecond => $now->nanosecond,
);
my $end_of_today = $begin_of_today->clone->add(days => 1);
my $span = DateTime::Span->from_datetimes(
    start => $begin_of_today,
    end   => $end_of_today,
);

# List of DateTime::Set objects from crontab file
my @entries;
while (defined(my $line = <>)) {
    chomp $line;
    next if $line =~ /^\s*#/; # comment
    next if $line =~ /^\s*$/; # blank line
    next if $line =~ /^\s*\w+=/; # environment variable

    my %param = (cron => $line);
       $param{user_mode} = $opt_user_mode if defined $opt_user_mode;
    my $dtc = eval { DateTime::Event::Cron->new_from_cron(%param) };
    if ($@) {
        chomp(my $err = $@);
        my $lnum = ARGV->input_line_number();
        warn "failed to parse crontab line: $err\n" . "$ARGV: line $lnum: $line\n";
        next;
    };
    my $set = $dtc->as_set(span => $span);
    my $dt = $begin_of_today;
    while ($dt = $set->next($dt) and DateTime->compare($dt, $end_of_today) != 0) {
        push @entries, {datetime => $dt, user => $dtc->user, command => $dtc->command};
    }
}

if ($opt_sort) {
    @entries = sort { $a->{datetime} <=> $b->{datetime} } @entries;
}

for my $entry (@entries) {
    my $dt = $entry->{datetime};
    my ($m, $h, $dom, $mon, $dow) = ($dt->minute, $dt->hour, $dt->day, $dt->month, $dt->day_of_week);
    my $user_command = (defined($entry->{user}) ? $entry->{user} . ' ' : '') . $entry->{command};
    print "$m $h $dom $mon $dow $user_command\n";
}


__END__

=head1 NAME

    expand-crontab - Expand crontab line(s) into non-glob lines.


=head1 SYNOPSIS

    $ echo '0 */4 * * * /path/to/command' | expand-crontab
    0 4 1 9 6 /path/to/command
    0 8 1 9 6 /path/to/command
    0 12 1 9 6 /path/to/command
    0 16 1 9 6 /path/to/command
    0 20 1 9 6 /path/to/command

=head1 OPTIONS

=over

=item -h, --help

Show this help.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>
